generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserState {
  ACTIVE
  SUSPENDED
  DELETED
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SubjectState {
  ACTIVE
  SUSPENDED
  DELETED
}

enum AdSubjectState {
  ACTIVE
  INACTIVE
  DELETED
}

enum UserAdState {
  ACTIVE
  INACTIVE
  DELETED
}

enum WeekDay {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  ALLDAYS
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  email     String    @unique
  password  String
  cpf       String    @unique
  ra        String    @unique
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  status    UserState @default(ACTIVE)
  userAd    UserAd[]

  @@index([id, name])
  @@map("users")
}

model Subject {
  id        String       @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  deletedAt DateTime?    @map("deleted_at")
  status    SubjectState @default(ACTIVE)
  userAd    UserAd[]

  @@index([id, name])
  @@map("subjects")
}

model Ad {
  id        String         @id @default(uuid()) @db.Uuid
  name      String
  weekDay   WeekDay[]      @default([]) @map("week_day")
  hourStart DateTime       @map("hour_start") @db.Time()
  hourEnd   DateTime       @map("hour_end") @db.Time()
  useVoice  Boolean        @map("use_voice")
  useVideo  Boolean        @map("use_video")
  linkCall  String         @default("") @map("link_call")
  status    AdSubjectState @default(ACTIVE)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  deletedAt DateTime?      @map("deleted_at")
  userAd    UserAd[]

  @@index([id, name])
  @@map("ads")
}

model UserAd {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String      @map("user_id") @db.Uuid
  adId      String      @map("ad_id") @db.Uuid
  subjectId String      @map("subject_id") @db.Uuid
  nameAd    String      @map("name_ad")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")
  status    UserAdState @default(ACTIVE)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ad      Ad      @relation(fields: [adId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([userId, subjectId, adId])
  @@map("usersAds")
}
